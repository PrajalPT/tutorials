CSS(Cascading Style Sheets)

1.Syntax:-
	p {
		color: red;
		text-align: center;
	}

2.Comment:-
	/* This is a single-line comment */
	p {
	  color: red;
	}
	
3.Colors:-
	* rgb(red, green, blue)
		1.Each parameter (red, green, and blue) defines the intensity of the color between 
		  0 and 255. For example, rgb(255, 0, 0) is displayed as red, because red is set to 
		  its highest value (255) and the others are set to 0.
	* #rrggbb
		1.Where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff 
		  (same as decimal 0-255). For example, #ff0000 is displayed as red, because red is 
		  set to its highest value (ff) and the others are set to the lowest value (00).

4.Background:-
	* background-color:-
		1.The background-color property specifies the background color of an element.
		For example, 
			body {
			  background-color: lightblue;
			  //background-color: #ff0000;
			  //background-color: rgb(255,0,0);
			}
	* background-image:-
		1.The background-image property specifies an image to use as the background of an 
			element.
		2.By default, the background-image property repeats an image both horizontally and 
			vertically.
		For example,
			body {
			  background-image: url("paper.gif");
			}
	* background-size:- 
		1.The background-size property specifies the size of the background images.
		background-size: auto(default)|length|cover|contain;
		
	* background-repeat:-
		1.The background-repeat property sets if/how a background image will be repeated.
		background-repeat: repeat(default)|repeat-x|repeat-y|no-repeat;
	* background-position:-
		1.The background-position property sets the starting position of a background image.
		background-position: value(default 0% 0%);
	
5.Units:-
	* There are two types of length units: absolute and relative.
	* Absolute Lengths:-
		1.The absolute length units are fixed and a length expressed in any of these will 
		  appear as exactly that size.
		2.Absolute length units are not recommended for use on screen, because screen sizes 
		  vary so much. However, they can be used if the output medium is known, 
		  such as for print layout.
		 Units 	  Description
		  cm		centimeters
		  mm		millimeters
		  in		inches (1in = 96px = 2.54cm)
		  px		pixels (1px = 1/96th of 1in)
		  pt		points (1pt = 1/72 of 1in)
		  pc		picas (1pc = 12 pt)
	* Relative Lengths:-
		1.Relative length units specify a length relative to another length property. 
		  Relative length units scale better between different rendering mediums.
		 Units 	  Description
		  em		Relative to the font-size of the parent element (2em means 2 times the 
					size of the current font)
		  rem		Relative to font-size of the root element
		  vw		Relative to 1% of the width of the viewport*
		  vh		Relative to 1% of the height of the viewport*
		  vmin		Relative to 1% of viewport's* smaller dimension
		  vmax		Relative to 1% of viewport's* larger dimension
		  %			Relative to the parent element
		  
		Note:- *Viewport = the browser window size. If the viewport is 50cm wide, 1vw = 0.5cm.
	
6.Position:-
	* The position property specifies the type of positioning method used for an element.
	* There are five different position values:
		1.static
		2.relative
		3.fixed
		4.absolute
		5.sticky
	* position: static
		1.HTML elements are positioned static by default.
		2.Static positioned elements are not affected by the top, bottom, left, and right 
		  properties.
	* position: relative
		1.An element with position: relative; is positioned relative to its normal position.
		2.Setting the top, right, bottom, and left properties of a relatively-positioned 
		  element will cause it to be adjusted away from its normal position.
	* position: fixed
		1.An element with position: fixed; is positioned relative to the viewport, which 
		  means it always stays in the same place even if the page is scrolled.
		2.The top, right, bottom, and left properties are used to position the element.
	* position: absolute
		1.An element with position: absolute; is positioned relative to the nearest positioned 
		  ancestor.
		2.However; if an absolute positioned element has no positioned parent, it uses the 
		  document body, and moves along with page scrolling.
	* position: sticky
		1.An element with position: sticky; is positioned based on the user's scroll position.
		2.It is positioned relative until a given offset position is met in the viewport - 
		  then it "sticks" in place.
		
7.Display:-
	* The display property specifies the display behavior of an element.
	* Types of display properties:-
		1.none ==> The element is completely removed
		2.inline ==> Displays an element as an inline element (like <span>). Any height and 
		  width properties will have no effect
		  E.g <a>, <b>, <button>, <input>, <label>, <span> etc.
		3.block ==>	Displays an element as a block element (like <p>). It starts on a new line,
  		  and takes up the whole width
		  E.g <div>, <form>, <h1>-<h6>, <li>, <ol>, <table> etc. 
		4.inline-block ==> Displays an element as an inline-level block container. The element 
		  itself is formatted as an inline element, but you can apply height and width values
		5.flex ==> Displays an element as a block-level flex container or one direction.
			
8.Boder:-
	* border-style:-
		1.The border-style property specifies what kind of border to display.
		For example,
			p.dotted {border-style: dotted;}
			p.dashed {border-style: dashed;}
			p.solid {border-style: solid;}
			p.double {border-style: double;}
			p.groove {border-style: groove;}
			p.ridge {border-style: ridge;}
			p.inset {border-style: inset;}
			p.outset {border-style: outset;}
			p.none {border-style: none;}
			p.hidden {border-style: hidden;}
			p.mix {border-style: dotted dashed solid double;}//(T R B L)
	* border-width:-
		1.The border-width property specifies the width of the four borders.
		For example,
			p {
				border-style: solid;
				border-width: 25px 10px 4px 35px; /*  top right bottom left */
				border-width: 25px 10px; /*  top-bottom left-right */
			}	
	* border-color:-
		1.The border-color property is used to set the color of the four borders.
		For example,
			p {
				border-style: solid;
				border-color: red;
			}
	* Border Sides:-
		For example,
			p {
				border-top-style: dotted;
				border-right-style: solid;
				border-bottom-style: dotted;
				border-left-style: solid;
			}
	* Border - Shorthand Property:-
		1. The border property is a shorthand property for the following individual border 
		properties.
			* border-width
			* border-style (required)
			* border-color
	* border-radius:-
		1.The border-radius property is used to add rounded borders to an element.
		For example,
			p {
				border: 2px solid red;
				border-radius: 5px;
				border-radius: 5px 10px 4px 5px; /*  top right bottom left */
				border-radius: 5px 10px; /*  top-bottom left-right */
			}

9.Margins:-
	* The CSS margin properties are used to create space around elements, outside of any 
	  defined borders.
	* CSS has properties for specifying the margin for each side of an element:-
		1.margin-top
		2.margin-right
		3.margin-bottom
		4.margin-left
	* All the margin properties can have the following values:-
		1.auto - the browser calculates the margin
		2.length - specifies a margin in px, pt, cm, etc.
		3.% - specifies a margin in % of the width of the containing element
		4.inherit - specifies that the margin should be inherited from the parent element
	* Margin - Shorthand Property:- The margin property is a shorthand property for the 
	  following examples 
		1.If the margin property has four values:-
			margin: 25px 50px 75px 100px;
			top margin is 25px
			right margin is 50px
			bottom margin is 75px
			left margin is 100px
		2.If the margin property has three values:-
			margin: 25px 50px 75px;
			top margin is 25px
			right and left margins are 50px
			bottom margin is 75px
		3.If the margin property has two values:-
			margin: 25px 50px;
			top and bottom margins are 25px
			right and left margins are 50px
		4.If the margin property has one value:-
			margin: 25px;
			all four margins are 25px

10.Padding:-
	* Padding is used to create space around an element's content, inside of any defined 
	  borders.
	* CSS has properties for specifying the padding for each side of an element:-
		1.padding-top
		2.padding-right
		3.padding-bottom
		4.padding-left
	* All the padding properties can have the following values:-
		1.length - specifies a padding in px, pt, cm, etc.
		2.% - specifies a padding in % of the width of the containing element
		3.inherit - specifies that the padding should be inherited from the parent element
	* Padding - Shorthand Property:- The padding property is a shorthand property for the 
	  following examples:-
		1.If the padding property has four values:-
			padding: 25px 50px 75px 100px;
			top padding is 25px
			right padding is 50px
			bottom padding is 75px
			left padding is 100px
		2.If the padding property has three values:-
			padding: 25px 50px 75px;
			top padding is 25px
			right and left paddings are 50px
			bottom padding is 75px
		3.If the padding property has two values:-
			padding: 25px 50px;
			top and bottom paddings are 25px
			right and left paddings are 50px
		4.If the padding property has one value:-
			padding: 25px;
			all four paddings are 25px
			
11.Height and Width:-
	* The CSS height and width properties are used to set the height and width of an element.
	* The height and width properties do not include padding, borders, or margins. It sets the
  	  height/width of the area inside the padding, border, and margin of the element.
	* The height and width properties may have the following values:-
		1.auto - This is default. The browser calculates the height and width
		2.length - Defines the height/width in px, cm, etc.
		3.% - Defines the height/width in percent of the containing block
	* The max-width property is used to set the maximum width of an element.
	* The max-width can be specified in length values, like px, cm, etc., or in 
		percent (%) of the containing block, or set to none (this is default. Means 
		that there is no maximum width).
	* Using max-width instead, in this situation, will improve the browser's handling
		of small windows.
	* min-width, min-height and max-height also has same properties of max-width.
	Note: If you for some reason use both the width property and the max-width 
		property on the same element, and the value of the width property is larger 
		than the max-width property; the max-width property will be used (and the 
		width property will be ignored).

12.Flex:- Flex has two axis main axis(x axis) and cross axis(y axis). 
	Its 1 dimentional.  
	* Types of flex properties:-
		1.flex-direction:-
			* The flex-direction CSS property sets how flex items are placed in the 
				flex container.
			* row (default): left to right in ltr; right to left in rtl
			* row-reverse: right to left in ltr; left to right in rtl
			* column: same as row but top to bottom
			* column-reverse: same as row-reverse but bottom to top
			For example,
				.container {
				  flex-direction: row | row-reverse | column | column-reverse;
				}
		2.flex-wrap:-
			* By default, flex items will all try to fit into one line. You can 
				change that and allow the items to wrap as needed with this property.
			* nowrap (default): all flex items will be on one line
			* wrap: flex items will wrap onto multiple lines, from top to bottom.
			* wrap-reverse: flex items will wrap onto multiple lines from bottom to 
				top.
			For example,
				.container {
				  flex-wrap: nowrap | wrap | wrap-reverse;
				}
		3.flex-flow:-
			* This is a shorthand for the flex-direction and flex-wrap properties.
			* The default value is row nowrap.
			#write examples based on flex-direction and flex-wrap#
		4.justify-content:-
			* This defines the alignment along the main axis.
			* flex-start (default): items are packed toward the start of the 
				flex-direction.
			* flex-end: items are packed toward the end of the flex-direction.
			* start: items are packed toward the start of the writing-mode direction.
			* end: items are packed toward the end of the writing-mode direction.
			* left: items are packed toward left edge of the container, unless that 
				doesn’t make sense with the flex-direction, then it behaves like start.
			* right: items are packed toward right edge of the container, unless that
				doesn’t make sense with the flex-direction, then it behaves like end.
			* center: items are centered along the line
			* space-between: items are evenly distributed in the line; first item is 
				on the start line, last item on the end line
			* space-around: items are evenly distributed in the line with equal space
				around them. Note that visually the spaces aren’t equal, since all 
				the items have equal space on both sides. 
			* space-evenly: items are distributed so that the spacing between any two
				items (and the space to the edges) is equal.
		5.align-items:-
			* This defines the default behavior for how flex items are laid out along
			the cross axis on the current line.
			* normal (default): items are packed in their default position as if no 
				value was set.
			* flex-start / start: items packed to the start of the container.
			* flex-end / end: items packed to the end of the container.
			* center: items centered in the container.
			* space-between: items evenly distributed; the first line is at the start of the container 
							 while the last one is at the end.
			* space-around: items evenly distributed with equal space around each line.
			* space-evenly: items are evenly distributed with equal space around them.
			* stretch: lines stretch to take up the remaining space.
		6.order:-
			* The order property controls the order in which they appear in the flex container.
			* By default, flex items are laid out in the source order.
		7.flex-grow:-
			* This defines the ability for a flex item to grow if necessary.
			* Its default value is 0.
		8.flex-shrink:-
			* This defines the ability for a flex item to shrink if necessary.
			* Its default value is 1.
		9.flex-basis:-
			* This defines the default size of an element
			* Its default value is auto.
		10.flex:-
			* This is the shorthand for flex-grow, flex-shrink and flex-basis combined. 
			* The second and third parameters (flex-shrink and flex-basis) are optional.
		11.align-self:-
			* This allows the default alignment (or the one specified by align-items) to be 
			overridden for individual flex items.
			* Please see the align-items explanation to understand the available values.
			E.g:-
				.item {
				  align-self: auto | flex-start | flex-end | center | baseline | stretch;
				}
		12.gap:-
			The gap property defines the size of the gap between the rows and columns.
			gap: row-gap column-gap;
13.Text:-
	* Text Color:- The color property is used to set the color of the text. The color is 
		specified by:-
	    1.a color name - like "red"
	    2.a HEX value - like "#ff0000"
	    3.an RGB value - like "rgb(255,0,0)"
		For example:-
			h1 {
			  color: green;
			}
	* Text Direction:- The direction property specifies the text direction/writing 
		direction within a block-level element.
		direction: ltr(default)|rtl;
	* Text Align:- The text-align property specifies the horizontal alignment of text in an 
		element.
		text-align: left(default)|right|center|justify;
	* Text Align Last:- The text-align-last property specifies how to align the last line of 
		a text.
		text-align-last: auto(default)|left|right|center|justify|start|end;
	* Vertical Align:- The vertical-align property sets the vertical alignment of an element.
		vertical-align: baseline(default)|length|sub|super|top|text-top|middle|bottom|
						text-bottom;
	* Text Decoration Line:- The text-decoration-line property sets the kind of text decoration
		to use (like underline, overline, line-through).
		text-decoration-line: none(default)|underline|overline|line-through;
	* Text Decoration Color:- The text-decoration-color property specifies the color of the 
		text-decoration (underlines, overlines, linethroughs).
		text-decoration-color: color;
	* Text Decoration Style:- The text-decoration-style property sets the style of the text 
		decoration (like solid, wavy, dotted, dashed, double).
		text-decoration-style: solid(default)|double|dotted|dashed|wavy;
	* Text Decoration Thickness:- The text-decoration-thickness property specifies the 
		thickness of the decoration line.
		text-decoration-thickness: auto(default)|from-font|length/percentage;
	* Text Decoration:- The text-decoration property specifies the decoration added to text, 
		and is a shorthand property for:-
		1.text-decoration-line (required)
		2.text-decoration-color
		3.text-decoration-style
		4.text-decoration-thickness
	* Text Transformation:- The text-transform property is used to specify uppercase and 
		lowercase letters in a text.
		text-transform: none(default)|capitalize|uppercase|lowercase;
	* Letter Spacing:- The letter-spacing property increases or decreases the space between 
		characters in a text.
		letter-spacing: normal(default)|length;
	* Line Height:- The line-height property specifies the height of a line.
		line-height: normal(default)|number|length;
	* Text Indent:- The text-indent property specifies the indentation of the first line in a 
		text-block.
		text-indent: length(default is 0);
	* White Space:- The white-space property specifies how white-space inside an element is 
		handled.
		white-space: normal(default)|nowrap|pre|pre-line|pre-wrap;
	* Text Shadow:- The text-shadow property adds shadow to text.
		text-shadow: h-shadow v-shadow blur-radius color|none;
		
14.Fonts:-
	* Font Family:- In CSS, we use the font-family property to specify the font of a text.
		For Example:-
			.p1 {
			  font-family: "Times New Roman", Times, serif;
			}
	* Font Style:- The font-weight property specifies the weight of a font.
		For Example:-
			p.normal {
			  font-style: normal;//italic,
			}
	* Font Size:- The font-size property sets the size of the text.
		Note: If you do not specify a font size, the default size for normal text, like 
			paragraphs, is 16px (16px=1em).
		For Example:-
			h1 {
			  font-size: 40px;
			  /* font-size: 2.5em; 40px/16=2.5em */
			}
	* Font Weight:- The font-weight property specifies the weight of a font.
		For Example:-
			p.normal {
			  font-weight: normal;//bold;
			}
	* Font Variant:- The font-variant property specifies whether or not a text should be 
		displayed in a small-caps font.
		For Example:-
			p.normal {
			  font-variant: normal;//small-caps
			}
	* Font Google:- If you do not want to use any of the standard fonts in HTML, you can use 
		Google Fonts.
		For Example:-
			<head>
				<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia">
				<style>
				body {
				  font-family: "Sofia", sans-serif;
				}
				</style>
			</head>
	* Font Shorthand:- To shorten the code, it is also possible to specify all the individual 
		font properties in one property.
		The font property is a shorthand property for:-
			font-style
			font-variant
			font-weight
			font-size/line-height(required)
			font-family(required)
	
15.Links:- In addition, links can be styled differently depending on what state they are in.
	The four links states are:-
		1.a:link - a normal, unvisited link
		2.a:visited - a link the user has visited
		3.a:hover - a link when the user mouses over it
		4.a:active - a link the moment it is clicked
		
16.Z Index:- The z-index property specifies the stack order of an element.
	Note: z-index only works on positioned elements (position: absolute, position: relative, 
		  position: fixed, or position: sticky) and flex items
	z-index: auto(default)|number;
	
17.Overflow:- The CSS overflow property controls what happens to content that is 
	too big to fit into an area.
	* Overflow:- The overflow property specifies what should happen if content overflows an 
		element's box.
		Note: The overflow property only works for block elements with a specified height.
		overflow: visible(default)|hidden|clip|scroll|auto;
	* Overflow Wrap:- The overflow-wrap property specifies whether or not the browser can 
		break lines with long words, if they overflow the container.
		overflow-wrap: normal|break-word;
	* Overflow X:- The overflow-x property specifies whether to clip the content, add a scroll
		bar, or display overflow content of a block-level element, when it overflows at the 3
		left and right edges.
		overflow-x: visible(default)|hidden|scroll|auto;
	* Overflow Y:- The overflow-y property specifies whether to clip the content, add a scroll
		bar, or display overflow content of a block-level element, when it overflows at the 
		top and bottom edges.
		overflow-y: visible(default)|hidden|scroll|auto;
		
18.Float:- The CSS float property specifies how an element should float.
	The float property can have one of the following values:-
		1.left - The element floats to the left of its container
		2.right - The element floats to the right of its container
		3.none - The element does not float (will be displayed just where it occurs in the text). 
			This is default
		4.inherit - The element inherits the float value of its parent
		
19.Clear:- When we use the float property, and we want the next element below (not on right or
	left), we will have to use the clear property.
	The clear property can have one of the following values:-
		1.none - The element is not pushed below left or right floated elements. This is default
		2.left - The element is pushed below left floated elements
		3.right - The element is pushed below right floated elements
		4.both - The element is pushed below both left and right floated elements
		//explain with example
		
20.Opacity / Transparency:- The opacity property specifies the opacity/transparency of an 
	element.
	For example:-
		img {
		  opacity: 0.5;
		}
		
21.Selectors:- CSS selectors are used to "find" (or select) the HTML elements you want to 
	style. We can divide CSS selectors into five categories:
	* Simple selectors:-
		1.id Selector:- The id of an element is unique within a page, so the id selector is 
			used to select one unique element. Write a hash (#) character, followed by the id 
			of the element.
			For example:- 
				#para1 {
				  text-align: center;
				  color: red;
				}
		2.class Selector:- To select elements with a specific class, write a period (.) 
			character, followed by the class name.
			For example:-
				.center {
				  text-align: center;
				  color: red;
				}
		3.Universal Selector:- The universal selector (*) selects all HTML elements on the 
			page. 
			For example:-
				* {
				  text-align: center;
				  color: red;
				}
		
	* Combinator selectors (select elements based on a specific relationship between them)
		There are four different combinators in CSS:-
			1.descendant selector (space):- The descendant selector matches all elements 
				that are descendants of a specified element.
			2.child selector (>):- The child selector selects all elements that are the 
				children of a specified element.
			3.adjacent sibling selector (+):- The adjacent sibling selector is used to select 
				an element that is directly after another specific element.
			4.general sibling selector (~):- The general sibling selector selects all elements
				that are next siblings of a specified element.

	* Pseudo-class selectors (select elements based on a certain state)
	   Selector		  	   Example				   Example description
		:active				a:active				Selects the active link
		:checked			input:checked			Selects every checked <input> element
		:disabled			input:disabled			Selects every disabled <input> element
		:first-child		p:first-child			Selects every <p> elements that is the 
														first child of its parent
		:first-of-type		p:first-of-type			Selects every <p> element that is the 
														first <p> element of its parent
		:focus				input:focus				Selects the <input> element that has focus
		:hover				a:hover					Selects links on mouse over
		:last-child			p:last-child			Selects every <p> elements that is the 
														last child of its parent
		:link				a:link					Selects all unvisited links
		:not(selector)		:not(p)					Selects every element that is not a <p> 
														element
		:nth-child(n)		p:nth-child(2)			Selects every <p> element that is the 
														second child of its parent
		:nth-last-child(n)	p:nth-last-child(2)		Selects every <p> element that is the 
														second child of its parent, counting
														from the last child
		:required			input:required			Selects <input> elements with a "required" 
														attribute specified
		
	* Pseudo-elements selectors (select and style a part of an element)
	   Selector		   Example		   Example description
		::after			p::after		Insert something after the content of each <p> element
		::before		p::before		Insert something before the content of each <p> element
		::selection		p::selection	Selects the portion of an element that is selected by a 
										user
	* Attribute selectors (select elements based on an attribute or attribute value)
	   Selector			   	   Example				   Example description
		[attribute]				[target]				Selects all elements with a target 
															attribute
		[attribute=value]		[target=_blank]			Selects all elements with 
															target="_blank"
		[attribute~=value]		[title~=flower]			Selects all elements with a title 
															attribute containing the word 
															"flower"
		[attribute|=value]		[lang|=en]				Selects all elements with a lang 
															attribute value starting with "en"
		[attribute^=value]		a[href^="https"]		Selects every <a> element whose href 
															attribute value begins with "https"
		[attribute$=value]		a[href$=".pdf"]			Selects every <a> element whose href 
															attribute value ends with ".pdf"
		[attribute*=value]		a[href*="w3schools"]	Selects every <a> element whose href 
															attribute value contains the 
															substring "w3schools"
		
22.Specificity Hierarchy:-
	There are four categories which define the specificity level of a selector:-
		1.Inline styles - Example: <h1 style="color: pink;">
		2.IDs - Example: #navbar
		3.Classes, pseudo-classes, attribute selectors - Example: .test, :hover, [href]
		4.Elements and pseudo-elements - Example: h1
		
23.!important:- The !important rule in CSS is used to add more importance to a property/value 
	than normal.If you use the !important rule, it will override ALL previous styling rules 
	for that specific property on that element!
	For example:-
		.myclass {
		  background-color: gray;
		}
		p {
		  background-color: red !important;
		}

24.Math Functions:- The CSS math functions allow mathematical expressions to be used as property
	values. Here, we will explain the calc(), max() and min() functions.
	* calc():- The calc() function performs a calculation to be used as the property value.
	* max():- The max() function uses the largest value, from a comma-separated list of values,
		as the property value.
	* min():- The min() function uses the smallest value, from a comma-separated list of 
	values, as the property value.
	